#This script, created by Christian Javier, facilitates the process of creating Active Directory (AD) profiles for new users. Here's a summary of what the script does:

#1. User Input Validation: Defines a function `GetName` to validate user input for a username.

#2. Get User Information: Prompts for the new hire's name (First.Lastname), retrieves the corresponding user account, and sets default AD profile parameters.

#3. Update AD User Information: Prompts for additional user information like job title, reporting manager, department, and office location. Updates the AD user's attributes accordingly.

#4. Security Group Mimic: Copies security group memberships from a source user (specified by SamAccountName) to the newly created user. It also logs this operation to a text file.

#5. License Assignment: Assigns an E3 license to the user, connecting to Azure AD, setting the license SKU, and assigning it.

#6. MS Teams Channel Assignment: Connects to Microsoft Teams and assigns the user to the "ZDL_AllStaff_US" team.

#7. Creating Home Directory: Creates a home directory for the user on a network share.

#Note: The script includes comments providing instructions for certain configurations that may need to be adjusted, such as changing the username for Azure module and the log file path.

#Change your user name in Line 94 for Azure module
#Change path in Line 68 for Security group Logs

#In summary, this script streamlines the process of setting up a new user's AD profile, including attributes, group memberships, licenses, and Microsoft Teams channel access.
Import-Module ActiveDirectory

#This function validates user input
function GetName {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [ValidatePattern('[a-zA-Z\.]')]
        [string]$Name
    )

    return $Name
}

# Get user information
Write-Host -ForegroundColor green "Input New Hire Name"
$aduser = Read-Host -Prompt "Enter username (First.Lastname)"
$aduser = GetName -Name $aduser
$User = Get-ADUser -Identity $aduser -ErrorAction Stop

# Set default parameters
$Param = @{
    City = 'El Segundo'
    Company = 'ZOO Digital Production'
    Country = 'US'
    Office = 'Los Angeles'
    State = 'CA'
    StreetAddress = '2201 Park Place Suite 100'
    PostalCode = '90245'
}

# Set default parameters for user
$User | Set-ADUser @Param

Write-Host "Entering AD Attributes" -ForegroundColor Green
# Prompt user to enter job information
try {
    $Ti = Read-Host -Prompt "Enter Job Title" 
    $Mana = Read-Host -Prompt "Reports to (First.LastName)" 
    $Depart = Read-Host -Prompt "Department"
    
    # Validate input for $Office variable
    $validOfficeValues = "Los Angeles", "Remote US", "los angeles", "remote us"
    
    while ($true) {
        $Office = Read-Host -Prompt "Los Angeles or Remote US"
        if ($validOfficeValues.Contains($Office)) {
            break
        }
        Write-Host "Invalid input for Office. Please enter either 'Los Angeles' or 'Remote US'." -ForegroundColor Red
    }
    
    # Update user information
    Set-ADUser -Identity $aduser -Title $Ti -Description $Ti -Manager $Mana -Department $Depart -Office $Office
}
catch {
    Write-Host "An error occurred: $($_.Exception.Message)"
}

# Get the Source and Target users
Write-Host "Entering Security Group Mimic" -ForegroundColor Green
$SourceUserAccount = Read-Host "Enter Source to copy from (SamAccountName) "
$TargetUserAccount = $aduser

# Create a text log about the security groups being added
# Change path for logs
$logFile = "C:\Users\christian.javier.US\Documents\scripts\_Logs\CopyADGroup.log"
$time = Get-Date
Add-Content -Path $logFile -Value $time -Encoding UTF8
Add-Content -Path $logFile -Value "___________"
Add-Content -Path $logFile -Value "Copying AD groups from $SourceUserAccount to $TargetUserAccount" -Encoding UTF8

# Obtain groups from the SourceAccount
$getUserGroups = Get-ADUser -Identity $SourceUserAccount -Properties MemberOf | Select-Object -ExpandProperty MemberOf # Add the target user to each group of the source user

# Iterates over container and add source groups to target
foreach ($group in $getUserGroups) {
    Add-Content -Path $logFile -Value "Adding $TargetUserAccount to $group" -Encoding UTF8
    try {
        Add-ADGroupMember -Identity $group -Members $TargetUserAccount -Verbose
    } catch {
        Add-Content -Path $logFile -Value $_.Exception.Message -Encoding UTF8
    }
}

#Assigns E3 License to User
Connect-AzureAD -AccountId christian.javier@zoodigital.com #Change the username
Write-Host "Assigning MS License (E3)" -ForegroundColor Green
$User = Get-AzureADUser -SearchString $aduser@zoodigital.com
$User

#Assign single License
Set-AzureADUser -ObjectId $user.ObjectId
$License = New-object -typename Microsoft.Open.AzureAD.Model.AssignedLicense
$License.SkuId = '6fd2c87f-b296-42f0-b197-1e91e994b900' #6fd2c87f-b296-42f0-b197-1e91e994b900 zoodigitalit:ENTERPRISEPACK
$LicenseToAssign = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses
$LicenseToAssign.AddLicenses = $License
Set-AzureADUser -ObjectId $User.ObjectId -UsageLocation "US"
Set-AzureADUserLicense -ObjectId $User.ObjectId -AssignedLicenses $LicenseToAssign
Get-AzureADUser -ObjectId $User.ObjectId | Select-Object -ExpandProperty AssignedLicenses

#Assigning MS Teams Ch. to user
Connect-MicrosoftTeams
Write-host "Assigning MS Teams Ch. ZDL_AllStaff_US" -ForegroundColor Green
add-teamuser -GroupId 7b9e276a-4187-4553-b4eb-48d482330e01 -User $aduser@zoodigital.com


#Creating Home Directory for User
Write-Host -ForegroundColor Green "Creating Home Drive Directory"
$path = "\\us-cmid-nas-01\c$\mid\users"
try {
    mkdir $path\$aduser -ErrorAction Stop
} catch [System.IO.IOException] {
    Write-Host "Directory already exists: $path\$aduser"
    # Handle the situation where the directory already exists
}
